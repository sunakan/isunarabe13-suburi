upstream main {
    server 127.0.0.1:8080;
    # keepalive_requests(def: 100)
    # 1つの接続で何回リクエストを処理するか
    # 同じクライアントからの過度なリクエストを制限し、サーバーリソースを保護
    # isuconでは大きくても構わない
    keepalive_requests 1000000;
    # keepalive(def: 75秒)
    # HTTP接続を維持する時間
    keepalive 256;
}
upstream sub {
    server 192.168.0.11:8080;
    keepalive_requests 1000000;
    keepalive 256;
}

server {
  listen 80 default_server;
  server_name _;
  index index.html index.htm index.nginx-debian.html;
  root /var/www/html;
  location / {
    try_files $uri $uri/ =404;
  }
}

server {
  listen 443 ssl default_server;
  server_name t.isucon.pw;
  server_name *.t.isucon.pw;

  ssl_certificate     /etc/nginx/tls/_.t.isucon.pw.crt;
  ssl_certificate_key /etc/nginx/tls/_.t.isucon.pw.key;

  ssl_protocols TLSv1.3;
  ssl_prefer_server_ciphers off;

  client_max_body_size 10m;
  root /home/isucon/webapp/public/;
  location / {
    try_files $uri /index.html;
  }

  # proxy_http_version(def: 1.0)
  # Nginxがアップストリームサーバーとの通信に使用するHTTPプロトコルのバージョン
  # 基本的にproxy_set_header Connection ""; とセットで使うらしい
  proxy_http_version 1.1;
  proxy_set_header Connection "";
  proxy_set_header Host $host;

  # 画像ファイルはNginxから返す
  location ~ ^/api/user/(.+)/icon$ {
    # 最大100個のファイルディスクリプタをキャッシュ(デフォルトは無効)
    open_file_cache max=100;
    try_files /images/$1.jpeg @api;
  }
  location @api {
    proxy_pass http://localhost:8080;
  }

  location /api/register {
    proxy_pass http://sub;
  }

  location /api {
    proxy_pass http://main;
  }
}
